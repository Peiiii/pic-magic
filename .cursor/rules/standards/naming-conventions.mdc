# 命名规范

## 文件与文件夹命名

### 1. 文件命名规范
- 所有文件和文件夹必须使用 **kebab-case** 命名
- 包括但不限于：TypeScript、JavaScript、CSS、SCSS、HTML、Markdown、JSON、YAML等所有文件类型
- 示例：
  - ✅ `user-profile.tsx`
  - ✅ `product-detail-page.tsx`
  - ✅ `data-manager.service.ts`
  - ✅ `project-brief.md`
  - ✅ `tech-context.md`
  - ✅ `system-patterns.md`
  - ✅ `active-context.md`
  - ✅ `progress.md`
  - ❌ `userProfile.tsx`
  - ❌ `productDetailPage.tsx`
  - ❌ `dataManagerService.ts`
  - ❌ `projectBrief.md`
  - ❌ `techContext.md`

### 2. Service文件特殊规范
- Service文件必须以 `.service.ts` 结尾
- 示例：
  - ✅ `user-manager.service.ts`
  - ✅ `api-client.service.ts`
  - ✅ `data-store.service.ts`
  - ❌ `user-manager.ts`
  - ❌ `apiClientService.ts`

### 3. Store文件特殊规范
- Store文件必须以 `.store.ts` 结尾
- 示例：
  - ✅ `chat-view.store.ts`
  - ✅ `user-preferences.store.ts`
  - ✅ `app-layout.store.ts`
  - ✅ `navigation.store.ts`
  - ❌ `chat-view-store.ts`
  - ❌ `chatViewStore.ts`
  - ❌ `chat-view.ts`

### 4. 文件夹命名规范
- 文件夹也必须使用 kebab-case
- 示例：
  - ✅ `user-management/`
  - ✅ `product-catalog/`
  - ✅ `data-processing/`
  - ❌ `userManagement/`
  - ❌ `productCatalog/`

## Hook命名规范

### 1. 语义化命名原则
- Hook名称应当语义化，清晰表达功能用途
- 避免可能与其他功能混淆的命名
- 确保命名具有清晰的识别性

### 2. 命名模式
- 使用 `use` 前缀 + 功能描述
- 功能描述应当具体且唯一
- 示例：
  - ✅ `useUserProfile` - 用户资料管理
  - ✅ `useProductList` - 产品列表管理
  - ✅ `useDataFetch` - 数据获取
  - ✅ `useFormValidation` - 表单验证
  - ❌ `useData` - 过于通用
  - ❌ `useManager` - 不够具体
  - ❌ `useHandler` - 功能不明确

### 3. 避免的命名模式
- 避免过于通用的词汇：`useData`, `useManager`, `useHandler`
- 避免可能冲突的命名：`useUser` (可能与其他user相关hook混淆)
- 避免缩写：`useMsg` (应使用 `useMessage`)
- 避免数字后缀：`useUser2`, `useChatV2`

### 4. 推荐命名模式
- 功能 + 对象：`useUserProfile`, `useProductList`
- 动作 + 对象：`useCreateUser`, `useUpdateProduct`
- 状态 + 对象：`useUserState`, `useProductStatus`

---
alwaysApply: true
description: 文件命名和Hook命名规范，确保代码风格一致性
---
