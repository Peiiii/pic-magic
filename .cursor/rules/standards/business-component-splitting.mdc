# Business Component Splitting Guidelines

## 核心原则：避免过早过度拆分

### 🚫 不要过早拆分的情况

1. **组件行数 < 150 行且职责单一**
   - 如果组件逻辑清晰，功能集中，不要为了"架构"而拆分
   - 保持组件的内聚性比过度拆分更重要

2. **没有明确的复用需求**
   - 如果组件只在特定业务场景使用，不要抽象为通用组件
   - 避免"未来可能用到"的过度设计

3. **业务逻辑紧密耦合**
   - 如果子组件之间业务逻辑高度相关，拆分反而增加复杂性
   - 保持相关逻辑在同一个组件中

### ✅ 适合拆分的情况

1. **组件超过 200 行且包含多个职责**
   - 例如：布局组件包含侧边栏、内容区、右侧边栏管理
   - 每个子组件有明确的独立职责

2. **有明确的复用需求**
   - 多个页面或功能都需要类似的组件
   - 可以抽象出通用的业务逻辑

3. **需要独立测试**
   - 复杂的业务逻辑需要单独测试
   - 子组件可以独立验证

### 🎯 拆分策略

#### 1. 渐进式拆分
```
第一阶段：保持原组件，添加注释和类型
第二阶段：提取工具函数和 hooks
第三阶段：必要时才拆分子组件
```

#### 2. 拆分优先级
```
高优先级：工具函数、hooks、类型定义
中优先级：UI 子组件
低优先级：业务逻辑组件
```

#### 3. 拆分粒度控制
- **不要**为了拆分而拆分
- **要**为了可维护性而拆分
- **保持**组件的业务完整性

### 📝 实际案例

#### ✅ 好的拆分（chat-layout）
- 原组件：63 行，但包含多个布局职责
- 拆分后：主组件 + 左侧边栏 + 内容区域
- 每个子组件职责明确，便于测试和维护

#### ❌ 过度拆分
- 将 50 行的简单组件拆分成 3-4 个子组件
- 为了"架构"而拆分，没有实际收益
- 增加了文件数量和导入复杂度

### 🔍 拆分前检查清单

在拆分组件前，请确认：

1. **必要性检查**
   - [ ] 组件确实超过 200 行或包含多个职责？
   - [ ] 有明确的复用需求？
   - [ ] 拆分能显著提升可维护性？

2. **复杂度评估**
   - [ ] 拆分后的组件关系是否清晰？
   - [ ] 是否会增加不必要的 props 传递？
   - [ ] 是否会影响业务逻辑的理解？

3. **收益分析**
   - [ ] 拆分后的代码是否更容易理解？
   - [ ] 是否便于独立测试？
   - [ ] 是否减少了重复代码？

### 💡 最佳实践

1. **保持简单**
   - 优先考虑重构现有组件
   - 只有在真正需要时才拆分

2. **关注业务价值**
   - 拆分应该解决实际问题
   - 不是为了满足"最佳实践"而拆分

3. **渐进式改进**
   - 先优化现有组件
   - 再考虑必要的拆分
   - 持续评估拆分的效果

### 🚨 警告信号

如果出现以下情况，说明可能过度拆分了：

- 单个功能需要导入 5+ 个组件
- 子组件之间的 props 传递变得复杂
- 业务逻辑分散在多个文件中，难以追踪
- 为了拆分而创建了"中间层"组件

---

**记住**：好的架构是服务于业务需求的，不是为了架构而架构。在拆分组件时，始终问自己："这样做真的让代码更好了吗？"
description:
globs:
alwaysApply: false
---
