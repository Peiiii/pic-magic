---
alwaysApply: true
---


# Quick Commands & Communication Conventions

## Git Operations

### ⚠️ 重要：禁止擅自提交
- **严格禁止**：在用户没有明确要求的情况下，禁止擅自进行任何 git commit 操作
- **必须等待**：只有用户明确使用 `/commit` 命令或明确要求提交时，才能执行提交
- **安全第一**：宁可等待用户确认，也不要冒险擅自提交

### `/commit` - Auto Commit with English Message
When user types `/commit`, automatically:
1. Run `git status` to review changes before committing
2. Run `git add .` to stage all changes
3. Generate a descriptive English commit message based on changes
4. Execute `git commit -m "message"`
5. Follow conventional commit format: `type(scope): description`

**Example commit messages:**
- `refactor: optimize component structure and naming`
- `feat: add new agent configuration assistant`
- `fix: resolve lint errors in agent preview component`
- `docs: update README with new features`

## Discussion & Planning

### `/readonly` - Read-Only Discussion Mode
When user types `/readonly`, enter discussion-only mode:
1. **No Code Changes**: Do not modify any files or run commands
2. **Analysis Only**: Provide insights, suggestions, and recommendations
3. **Creative Discussion**: Focus on ideas, concepts, and planning
4. **Architecture Review**: Discuss design patterns and approaches
5. **Problem Solving**: Brainstorm solutions without implementation

**Use cases:**
- Creative brainstorming sessions
- Architecture and design discussions
- Feature planning and requirements analysis
- Code review and feedback sessions
- Problem analysis and solution exploration
- Technology selection and comparison

**Response format:**
- Start with `[MODE: DISCUSSION]`
- Provide detailed analysis and insights
- Suggest multiple approaches when applicable
- Focus on concepts and ideas rather than implementation
- Ask clarifying questions to better understand requirements

## Code Quality & Architecture

### `/architect` - Architect's Perspective Review
When user requests "架构师视角" or "/architect", provide:
1. **Code Structure Analysis**: Evaluate file organization and component hierarchy
2. **Naming Conventions**: Check for semantic clarity and consistency
3. **Separation of Concerns**: Identify mixed responsibilities and suggest splits
4. **Maintainability**: Assess code complexity and suggest improvements
5. **Scalability**: Consider future extensibility and potential bottlenecks
6. **Best Practices**: Recommend architectural patterns and conventions

**Key evaluation criteria:**
- File size (keep under 250 lines)
- Single responsibility principle
- Clear naming conventions (kebab-case for files, PascalCase for components)
- Proper separation of UI, logic, and data layers
- Reusability and modularity

## Development Workflow

### `/build` - Build and Validate
When user types `/build`, automatically:
1. Run `pnpm build` to compile and build
2. Run `pnpm lint` to check code quality
3. Report any errors or warnings
4. Suggest fixes if issues found

### `/refactor` - Code Refactoring
When user requests refactoring:
1. Analyze current code structure
2. Identify areas for improvement
3. Suggest specific refactoring steps
4. Maintain functionality while improving code quality
5. Follow established naming conventions and patterns

## File Organization Rules

### Directory Structure
- Use kebab-case for directory and file names
- Group related functionality in feature directories
- Separate UI components, hooks, and utilities
- Keep index.ts files for clean exports

### Component Organization
- Split large components (>250 lines) into smaller, focused files
- Separate UI components from business logic
- Use descriptive, semantic names for components and functions
- Maintain clear import/export relationships

## UI/UX Design Excellence

### `/beautify` - World-Class UI Beautification
When user types `/beautify`, transform the current UI into a world-class design:
1. **Visual Hierarchy**: Implement sophisticated typography scales, spacing systems, and visual weight distribution
2. **Modern Aesthetics**: Apply glassmorphism, subtle gradients, micro-interactions, and refined shadows
3. **Color Harmony**: Create sophisticated color palettes with proper contrast ratios and accessibility
4. **Layout Excellence**: Implement grid systems, responsive design patterns, and visual balance
5. **Interactive Elements**: Add hover states, focus indicators, loading states, and smooth transitions
6. **Typography**: Use premium font combinations, proper line heights, and semantic text hierarchy
7. **Spacing & Rhythm**: Apply consistent spacing scales and visual rhythm throughout the interface
8. **Micro-interactions**: Implement subtle animations, state changes, and feedback mechanisms
9. **Accessibility**: Ensure WCAG compliance with proper contrast, focus management, and screen reader support
10. **Performance**: Optimize animations and transitions for smooth 60fps performance

**Design Principles:**
- **Elegance**: Clean, sophisticated, and timeless design language
- **Modernity**: Contemporary trends with lasting appeal
- **Usability**: Intuitive navigation and clear information architecture
- **Delight**: Surprising and delightful user experiences
- **Consistency**: Cohesive design system across all components
- **Accessibility**: Inclusive design for all users
- **Performance**: Smooth, responsive interactions
- **Maintainability**: Scalable and well-structured design tokens

**Expected Outcome:**
Transform any interface into a visually stunning, highly functional, and emotionally engaging experience that feels premium, modern, and unforgettable while maintaining excellent usability and accessibility standards.

### Code Review Responses
- Always start with current mode declaration: `[MODE: RESEARCH/PLAN/EXECUTE/REVIEW/DISCUSSION]`
- Provide clear, actionable feedback
- Suggest specific improvements with examples
- Consider both immediate fixes and long-term architectural benefits

### Error Handling
- When encountering errors, provide clear explanations
- Suggest multiple solutions when possible
- Prioritize fixes based on impact and effort
- Always verify fixes work before proceeding

## Naming Conventions

### Files and Directories
- Use kebab-case: `agent-configuration-assistant.tsx`
- Be descriptive and semantic: `use-agent-configuration-tools.tsx`
- Group related files in feature directories

### Components and Functions
- Use PascalCase for components: `AgentConfigurationAssistant`
- Use camelCase for functions and hooks: `useAgentConfigurationTools`
- Use descriptive names that clearly indicate purpose

### Types and Interfaces
- Use PascalCase with descriptive names: `AgentConfigurationAssistantProps`
- Include type information in names when helpful
- Be consistent across related types

# Quick Commands & Communication Conventions

## Git Operations

### ⚠️ 重要：禁止擅自提交
- **严格禁止**：在用户没有明确要求的情况下，禁止擅自进行任何 git commit 操作
- **必须等待**：只有用户明确使用 `/commit` 命令或明确要求提交时，才能执行提交
- **安全第一**：宁可等待用户确认，也不要冒险擅自提交

### `/commit` - Auto Commit with English Message
When user types `/commit`, automatically:
1. Run `git status` to review changes before committing
2. Run `git add .` to stage all changes
3. Generate a descriptive English commit message based on changes
4. Execute `git commit -m "message"`
5. Follow conventional commit format: `type(scope): description`

**Example commit messages:**
- `refactor: optimize component structure and naming`
- `feat: add new agent configuration assistant`
- `fix: resolve lint errors in agent preview component`
- `docs: update README with new features`

## Discussion & Planning

### `/readonly` - Read-Only Discussion Mode
When user types `/readonly`, enter discussion-only mode:
1. **No Code Changes**: Do not modify any files or run commands
2. **Analysis Only**: Provide insights, suggestions, and recommendations
3. **Creative Discussion**: Focus on ideas, concepts, and planning
4. **Architecture Review**: Discuss design patterns and approaches
5. **Problem Solving**: Brainstorm solutions without implementation

**Use cases:**
- Creative brainstorming sessions
- Architecture and design discussions
- Feature planning and requirements analysis
- Code review and feedback sessions
- Problem analysis and solution exploration
- Technology selection and comparison

**Response format:**
- Start with `[MODE: DISCUSSION]`
- Provide detailed analysis and insights
- Suggest multiple approaches when applicable
- Focus on concepts and ideas rather than implementation
- Ask clarifying questions to better understand requirements

## Code Quality & Architecture

### `/architect` - Architect's Perspective Review
When user requests "架构师视角" or "/architect", provide:
1. **Code Structure Analysis**: Evaluate file organization and component hierarchy
2. **Naming Conventions**: Check for semantic clarity and consistency
3. **Separation of Concerns**: Identify mixed responsibilities and suggest splits
4. **Maintainability**: Assess code complexity and suggest improvements
5. **Scalability**: Consider future extensibility and potential bottlenecks
6. **Best Practices**: Recommend architectural patterns and conventions

**Key evaluation criteria:**
- File size (keep under 250 lines)
- Single responsibility principle
- Clear naming conventions (kebab-case for files, PascalCase for components)
- Proper separation of UI, logic, and data layers
- Reusability and modularity

## Development Workflow

### `/build` - Build and Validate
When user types `/build`, automatically:
1. Run `pnpm build` to compile and build
2. Run `pnpm lint` to check code quality
3. Report any errors or warnings
4. Suggest fixes if issues found

### `/refactor` - Code Refactoring
When user requests refactoring:
1. Analyze current code structure
2. Identify areas for improvement
3. Suggest specific refactoring steps
4. Maintain functionality while improving code quality
5. Follow established naming conventions and patterns

## File Organization Rules

### Directory Structure
- Use kebab-case for directory and file names
- Group related functionality in feature directories
- Separate UI components, hooks, and utilities
- Keep index.ts files for clean exports

### Component Organization
- Split large components (>250 lines) into smaller, focused files
- Separate UI components from business logic
- Use descriptive, semantic names for components and functions
- Maintain clear import/export relationships

## Communication Patterns

### Code Review Responses
- Always start with current mode declaration: `[MODE: RESEARCH/PLAN/EXECUTE/REVIEW/DISCUSSION]`
- Provide clear, actionable feedback
- Suggest specific improvements with examples
- Consider both immediate fixes and long-term architectural benefits

### Error Handling
- When encountering errors, provide clear explanations
- Suggest multiple solutions when possible
- Prioritize fixes based on impact and effort
- Always verify fixes work before proceeding

## Naming Conventions

### Files and Directories
- Use kebab-case: `agent-configuration-assistant.tsx`
- Be descriptive and semantic: `use-agent-configuration-tools.tsx`
- Group related files in feature directories

### Components and Functions
- Use PascalCase for components: `AgentConfigurationAssistant`
- Use camelCase for functions and hooks: `useAgentConfigurationTools`
- Use descriptive names that clearly indicate purpose

### Types and Interfaces
- Use PascalCase with descriptive names: `AgentConfigurationAssistantProps`
- Include type information in names when helpful
- Be consistent across related types
